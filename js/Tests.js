// Generated by CoffeeScript 1.7.1
(function() {
  var Tests, test;

  test = function(name, env) {
    var logger;
    logger = {
      failed: false,
      fail: function() {
        if (!this.failed) {
          console.log("%c '" + name + "' failed.", 'color: red');
        }
        return this.failed = true;
      },
      expectEquality: function(expect, got, checkName) {
        if (expect !== got) {
          this.fail();
          return console.log("%c Discrepancy in '" + checkName + "'. Expected " + expect + ", got " + got + ".", 'color: red');
        }
      },
      expectPresence: function(value, checkName) {
        if (typeof value === 'undefined') {
          this.fail();
          return console.log("%c Discrepancy in '" + checkName + "'. Value is undefined.", 'color: red');
        }
      }
    };
    env.call(logger);
    if (!logger.failed) {
      return console.log("%c '" + name + "' passed.", 'color: green');
    }
  };

  Tests = (function() {
    function Tests() {}

    Tests.doTests = function() {
      test('Extensions', function() {
        var f, g;
        f = function(x) {
          return x * 2;
        };
        g = function(x) {
          return x + 2;
        };
        return this.expectEquality(f(g(5)), (f.compose(g))(5), 'composition with argument 5');
      });
      test('Parsing into AST', function() {
        var ast, code;
        code = 'set var 1\nif memory var is 1\n    set var 2\nif memory var is 2\n    set var 3';
        ast = CodeParser.buildAst(code);
        this.expectPresence(ast[1], 'second node presence');
        this.expectPresence(ast[1].cond, 'condition presence');
        this.expectEquality('memory var is 1', ast[1].cond, 'condition check');
        return this.expectPresence(ast[1].instructions, 'instruction presence');
      });
      test('Basic variable manipulation', function() {
        var code, drone;
        code = 'set var 1\nincrement var\nif memory var is 2\n    set var 5\nincrement var';
        drone = new Drone(null);
        drone.loadCode(code);
        drone.tick();
        return this.expectEquality(6, drone.memory["var"], 'setting, incrementing and conditions');
      });
      test('Arithmetic', function() {
        var code, drone;
        code = 'set a 1\nincrement a\nmult a a\ndiv a 2\nsub a 1\nadd a 4';
        drone = new Drone(null);
        drone.loadCode(code);
        drone.tick();
        return this.expectEquality(5, drone.memory.a, 'add, mult, sub and div');
      });
      test('Drone movement', function() {
        var code, drone, i, map, _i;
        code = 'increment step\nif memory step is 1\n    dig forward\nif memory step is 2\n    rotate cw\nif memory step is 3\n    rotate cw\nif memory step is 4\n    dig forward\nif memory step is 5\n    dig forward\nif memory step is 6\n    rotate ccw\nif memory step is 7\n    dig forward';
        map = WorldGenerator.makeEmptyMap(3, 3);
        drone = new Drone(map);
        drone.x = 1;
        drone.y = 1;
        drone.loadCode(code);
        for (i = _i = 1; _i <= 7; i = ++_i) {
          drone.tick();
        }
        this.expectEquality(2, drone.x, 'x coordinate');
        return this.expectEquality(2, drone.y, 'y coordinate');
      });
      test('Modules', function() {
        var code, drone, i, map, _i;
        code = 'module rotate_ccw\n    increment count\n    rotate ccw\n    if memory count is 2\n        set count 0\n        set_module go_left\nmodule go_left\n    increment count\n    dig forward\n    if memory count is 4\n        set count 0\n        set_module rotate_cw\nmodule rotate_cw\n    increment count\n    rotate cw\n    if memory count is 2\n        set count 0\n        set_module go_right\nmodule go_right\n    increment count\n    dig forward\n    if memory count is 5\n        set count 0\n        set_module none\nset_module rotate_ccw';
        map = WorldGenerator.makeEmptyMap(5, 1);
        drone = new Drone(map);
        drone.loadCode(code);
        drone.rotate('cw');
        drone.x = 4;
        for (i = _i = 1; _i <= 14; i = ++_i) {
          drone.tick();
        }
        return this.expectEquality(5, drone.x, 'x coordinate');
      });
      return test('Looking forward', function() {
        var code, drone, i, map, _i;
        code = 'if see dirt\n    increment count\nincrement step\nif memory step is 1\n    rotate ccw\nif memory step is 2\n    dig forward\nif memory step is 3\n    rotate cw\nif memory step is 4\n    dig forward\nif memory step is 5\n    rotate cw';
        map = WorldGenerator.makeEmptyMap(3, 3);
        map.setTile(1, 0, {
          tileIDName: 'dirt',
          tileContentName: 'dirt'
        });
        drone = new Drone(map);
        drone.x = 1;
        drone.y = 1;
        drone.loadCode(code);
        for (i = _i = 1; _i <= 6; i = ++_i) {
          drone.tick();
        }
        return this.expectEquality(2, drone.memory.count, 'dirt sightings');
      });
    };

    return Tests;

  })();

  window.Tests = Tests;

}).call(this);
