// Generated by CoffeeScript 1.7.1
(function() {
  (function() {
    var Drone;
    Drone = (function() {
      function Drone(map) {
        this.map = map;
        this.sprite = game.add.sprite(0, 0, 'drone');
        this.sprite.anchor.set(0.5);
        this.name = NameGenerator.generate();
        this.sprite.inputEnabled = true;
        this.sprite.events.onInputUp.add(function() {
          return true;
        }, true);
      }

      Drone.prototype.tick = function() {
        return this.execute();
      };

      Drone.prototype.execute = function() {
        var action, inst, _i, _len, _ref, _ref1, _ref2;
        action = {};
        _ref = this.instructions;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          inst = _ref[_i];
          inst.execute(action, this, this.map);
        }
        if ('digTile' in action) {
          this.map[action.digTile.x][action.digTile.y].tileID = game.tileIndexByName.stoneBackground;
          this.map[action.digTile.x][action.digTile.y].tileContent = game.tileIndexByName.sky;
        }
        if ('rotate' in action) {
          if (action.rotate.direction === 'cw') {
            this.sprite.rotation += Math.PI / 2;
            _ref1 = [-this.direction.y, this.direction.x], this.direction.x = _ref1[0], this.direction.y = _ref1[1];
          } else if (action.rotate.direction === 'ccw') {
            this.sprite.rotation -= Math.PI / 2;
            _ref2 = [this.direction.y, -this.direction.x], this.direction.x = _ref2[0], this.direction.y = _ref2[1];
          }
        }
        if ('move' in action) {
          this.x = action.move.x;
          return this.y = action.move.y;
        }
      };

      Drone.prototype.addInstruction = function(inst) {
        return this.instructions.push(inst);
      };

      Drone.prototype.destroy = function() {
        return sprite.destroy();
      };

      Drone.prototype.energy = 0;

      Drone.prototype.instructions = [];

      Drone.prototype.sprite = null;

      Drone.prototype.direction = {
        x: 0,
        y: -1
      };

      Drone.prototype.memory = {};

      Drone.prototype.name = "drone";

      Drone.property('x', {
        get: function() {
          return (this.sprite.x - 8) / 16;
        },
        set: function(val) {
          return this.sprite.x = val * 16 + 8;
        }
      });

      Drone.property('y', {
        get: function() {
          return (this.sprite.y - 8) / 16;
        },
        set: function(val) {
          return this.sprite.y = val * 16 + 8;
        }
      });

      return Drone;

    })();
    return window.Drone = Drone;
  })();

}).call(this);
